{"version":3,"file":"internAktivitetTypes-CwsZC-GE.js","sources":["../../node_modules/date-fns/constants.js","../../node_modules/date-fns/constructFrom.js","../../node_modules/date-fns/toDate.js","../../node_modules/date-fns/addDays.js","../../node_modules/date-fns/addMinutes.js","../../node_modules/date-fns/subDays.js","../../src/datatypes/arenaAktivitetTypes.ts","../../src/datatypes/aktivitetTypes.ts","../../src/datatypes/internAktivitetTypes.ts"],"sourcesContent":["/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","import { millisecondsInMinute } from \"./constants.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMinutes} function options.\n */\n\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of minutes to be added.\n * @param options - An object with options\n *\n * @returns The new date with the minutes added\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\nexport function addMinutes(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  _date.setTime(_date.getTime() + amount * millisecondsInMinute);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addMinutes;\n","import { addDays } from \"./addDays.js\";\n\n/**\n * The {@link subDays} function options.\n */\n\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be subtracted.\n * @param options - An object with options\n *\n * @returns The new date with the days subtracted\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\nexport function subDays(date, amount, options) {\n  return addDays(date, -amount, options);\n}\n\n// Fallback for modularized imports:\nexport default subDays;\n","import { AktivitetStatus } from './aktivitetTypes';\nimport { Forhaandsorientering } from './forhaandsorienteringTypes';\n\nexport enum ArenaEtikett {\n    AKTUELL = 'AKTUELL',\n    AVSLAG = 'AVSLAG',\n    IKKAKTUELL = 'IKKAKTUELL',\n    IKKEM = 'IKKEM',\n    INFOMOETE = 'INFOMOETE',\n    JATAKK = 'JATAKK',\n    NEITAKK = 'NEITAKK',\n    TILBUD = 'TILBUD',\n    VENTELISTE = 'VENTELISTE',\n}\n\nexport enum ArenaAktivitetType {\n    TILTAKSAKTIVITET = 'TILTAKSAKTIVITET',\n    GRUPPEAKTIVITET = 'GRUPPEAKTIVITET',\n    UTDANNINGSAKTIVITET = 'UTDANNINGSAKTIVITET',\n}\n\nexport interface Moteplan {\n    startDato: string;\n    sluttDato: string;\n    sted: string;\n}\n\n//Flere av disse kan muligens være null\nexport interface ArenaAktivitet {\n    //Felles\n    id: string; // Enten tekniskid eller arenaid\n    versjon: number;\n    status: AktivitetStatus;\n    type: ArenaAktivitetType;\n    tittel: string;\n    beskrivelse: string;\n    fraDato?: string;\n    tilDato?: string;\n    opprettetDato: string;\n    avtalt: boolean;\n    etikett?: ArenaEtikett;\n    oppfolgingsperiodeId: string | null;\n\n    forhaandsorientering?: Forhaandsorientering;\n\n    // Tiltaksaktivitet\n    deltakelseProsent: number;\n    tiltaksnavn: string;\n    tiltakLokaltNavn: string;\n    arrangoer: string;\n    bedriftsnummer: string;\n    antallDagerPerUke: number;\n    statusSistEndret: string;\n\n    // Gruppeaktivitet\n    moeteplanListe: Moteplan[];\n}\n","import { ArenaAktivitet, ArenaAktivitetType } from './arenaAktivitetTypes';\nimport { Forhaandsorientering } from './forhaandsorienteringTypes';\nimport { VeilarbAktivitet, VeilarbAktivitetType } from './internAktivitetTypes';\nimport { FellesTransaksjonsTyper } from './transaksjonstyperTypes';\n\nexport type AktivitetType = VeilarbAktivitetType | ArenaAktivitetType;\n\nexport enum AktivitetStatus {\n    BRUKER_ER_INTRESSERT = 'BRUKER_ER_INTERESSERT',\n    PLANLAGT = 'PLANLAGT',\n    GJENNOMFOERT = 'GJENNOMFORES',\n    FULLFOERT = 'FULLFORT',\n    AVBRUTT = 'AVBRUTT',\n}\n\nexport enum StillingStatus {\n    INGEN_VALGT = 'INGEN_VALGT',\n    SOKNAD_SENDT = 'SOKNAD_SENDT',\n    INNKALT_TIL_INTERVJU = 'INNKALT_TIL_INTERVJU',\n    AVSLAG = 'AVSLAG',\n    JOBBTILBUD = 'JOBBTILBUD',\n}\n\nexport enum StillingFraNavSoknadsstatus {\n    VENTER = 'VENTER',\n    CV_DELT = 'CV_DELT',\n    SKAL_PAA_INTERVJU = 'SKAL_PAA_INTERVJU',\n    JOBBTILBUD = 'JOBBTILBUD',\n    AVSLAG = 'AVSLAG',\n    IKKE_FATT_JOBBEN = 'IKKE_FATT_JOBBEN',\n    FATT_JOBBEN = 'FATT_JOBBEN',\n}\n\nexport enum Livslopsstatus {\n    PROVER_VARSLING = 'PROVER_VARSLING',\n    HAR_VARSLET = 'HAR_VARSLET',\n    KAN_IKKE_VARSLE = 'KAN_IKKE_VARSLE',\n    HAR_SVART = 'HAR_SVART',\n    AVBRUTT_AV_SYSTEM = 'AVBRUTT_AV_SYSTEM',\n    AVBRUTT_AV_BRUKER = 'AVBRUTT_AV_BRUKER',\n}\n\nexport enum Kanal {\n    TELEFON = 'TELEFON',\n    OPPMOTE = 'OPPMOTE',\n    INTERNET = 'INTERNETT',\n}\n\nexport enum JobbStatusType {\n    HELTID = 'HELTID',\n    DELTID = 'DELTID',\n}\n\nexport type BrukerType = 'BRUKER' | 'ARBEIDSGIVER' | 'TILTAKSARRANGOER' | 'NAV' | 'SYSTEM' | 'ARENAIDENT';\n\nexport interface AktivitetBaseProps<T = FellesTransaksjonsTyper> {\n    id: string;\n    versjon: string;\n    tittel: string;\n    opprettetDato: string;\n    status: AktivitetStatus;\n    endretAvType: BrukerType;\n    forhaandsorientering?: Forhaandsorientering;\n    endretAv: string;\n    endretDato: string;\n    avtalt: boolean;\n    etikett?: StillingStatus; // todo sjekk ut hvorfor denne ligger på baseprops og ikke i StillingAktivitet\n    transaksjonsType: T;\n    historisk: boolean;\n    fraDato?: string;\n    tilDato?: string;\n    avsluttetKommentar?: string;\n    beskrivelse?: string;\n    lenke?: string;\n    oppfolgingsperiodeId: string;\n}\n\nexport type AlleAktiviteter = VeilarbAktivitet | ArenaAktivitet;\n\nexport function isArenaAktivitet(aktivitet: AlleAktiviteter): aktivitet is ArenaAktivitet {\n    return (\n        [\n            ArenaAktivitetType.GRUPPEAKTIVITET,\n            ArenaAktivitetType.TILTAKSAKTIVITET,\n            ArenaAktivitetType.UTDANNINGSAKTIVITET,\n        ] as string[]\n    ).includes(aktivitet.type);\n}\n\nexport function isVeilarbAktivitet(aktivitet: AlleAktiviteter): aktivitet is VeilarbAktivitet {\n    return !isArenaAktivitet(aktivitet);\n}\n","import {\n    AktivitetBaseProps,\n    AlleAktiviteter,\n    BrukerType,\n    JobbStatusType,\n    Kanal,\n    Livslopsstatus,\n    StillingFraNavSoknadsstatus,\n} from './aktivitetTypes';\nimport { Detalj, Etikett, LenkeMedType, OppgaveLenke } from './eksternAktivitetTypes';\nimport {\n    FellesTransaksjonsTyper,\n    MoteTransaksjonsType,\n    SamtaleReferatTransaksjonsType,\n    StillingFraNavTransaksjonsType,\n    StillingTransaksjonsType,\n} from './transaksjonstyperTypes';\n\nexport type VeilarbAktivitet =\n    | SamtalereferatAktivitet\n    | MoteAktivitet\n    | StillingAktivitet\n    | SokeavtaleAktivitet\n    | MedisinskBehandlingAktivitet\n    | StillingFraNavAktivitet\n    | EgenAktivitet\n    | EksternAktivitet\n    | IJobbAktivitet;\n\nexport enum VeilarbAktivitetType {\n    EGEN_AKTIVITET_TYPE = 'EGEN',\n    STILLING_AKTIVITET_TYPE = 'STILLING',\n    SOKEAVTALE_AKTIVITET_TYPE = 'SOKEAVTALE',\n    IJOBB_AKTIVITET_TYPE = 'IJOBB',\n    BEHANDLING_AKTIVITET_TYPE = 'BEHANDLING',\n    MOTE_TYPE = 'MOTE',\n    SAMTALEREFERAT_TYPE = 'SAMTALEREFERAT',\n    STILLING_FRA_NAV_TYPE = 'STILLING_FRA_NAV',\n    EKSTERN_AKTIVITET_TYPE = 'EKSTERNAKTIVITET',\n}\n\nexport interface EgenAktivitet extends AktivitetBaseProps {\n    type: VeilarbAktivitetType.EGEN_AKTIVITET_TYPE;\n    hensikt?: string;\n    oppfolging?: string;\n}\n\nexport interface IJobbAktivitet extends AktivitetBaseProps {\n    type: VeilarbAktivitetType.IJOBB_AKTIVITET_TYPE;\n    fraDato?: string;\n    tilDato?: string;\n    jobbStatus: JobbStatusType;\n    ansettelsesforhold: string;\n    arbeidstid: string;\n}\n\nexport interface SokeavtaleAktivitet extends AktivitetBaseProps {\n    type: VeilarbAktivitetType.SOKEAVTALE_AKTIVITET_TYPE;\n    antallStillingerSokes?: number;\n    antallStillingerIUken?: number;\n    avtaleOppfolging?: string;\n}\n\nexport interface StillingAktivitet extends AktivitetBaseProps<FellesTransaksjonsTyper | StillingTransaksjonsType> {\n    type: VeilarbAktivitetType.STILLING_AKTIVITET_TYPE;\n    arbeidsgiver?: string;\n    kontaktperson?: string;\n    arbeidssted?: string;\n    stillingsTittel?: string;\n}\n\nexport interface SamtalereferatAktivitet\n    extends AktivitetBaseProps<FellesTransaksjonsTyper | SamtaleReferatTransaksjonsType> {\n    type: VeilarbAktivitetType.SAMTALEREFERAT_TYPE;\n    fraDato: string;\n    kanal: Kanal;\n    referat: string;\n    erReferatPublisert: boolean;\n}\n\nexport interface MoteAktivitet extends AktivitetBaseProps<FellesTransaksjonsTyper | MoteTransaksjonsType> {\n    type: VeilarbAktivitetType.MOTE_TYPE;\n    fraDato: string;\n    tilDato: string;\n    klokkeslett: string;\n    varighet: string;\n    kanal: Kanal;\n    adresse: string;\n    beskrivelse: string;\n    forberedelser: string;\n    referat: string;\n    erReferatPublisert: boolean;\n}\n\nexport interface MedisinskBehandlingAktivitet extends AktivitetBaseProps {\n    type: VeilarbAktivitetType.BEHANDLING_AKTIVITET_TYPE;\n    fraDato: string;\n    tilDato: string;\n    behandlingType: string;\n    behandlingSted: string;\n    effekt: string; //TODO: Rename i api, mål for behandlingen\n    behandlingOppfolging: string; //oppfølging fra nav, utgått\n    beskrivelse: string;\n}\n\nexport interface KontaktInfo {\n    navn: string;\n    tittel: string;\n    mobil: string;\n}\n\nexport interface CvKanDelesData {\n    kanDeles: boolean;\n    endretTidspunkt: Date;\n    avtaltDato: Date;\n    endretAv: string;\n    endretAvType: BrukerType;\n}\n\nexport interface StillingFraNavAktivitet\n    extends AktivitetBaseProps<FellesTransaksjonsTyper | StillingFraNavTransaksjonsType> {\n    type: VeilarbAktivitetType.STILLING_FRA_NAV_TYPE;\n    stillingFraNavData: StillingFraNavAktivitetData;\n}\n\nexport interface StillingFraNavAktivitetData {\n    cvKanDelesData?: CvKanDelesData;\n    soknadsfrist: string;\n    svarfrist: string;\n    arbeidsgiver: string;\n    bestillingsId: string;\n    stillingsId: string;\n    arbeidssted: string;\n    kontaktpersonData: KontaktInfo;\n    soknadsstatus?: StillingFraNavSoknadsstatus;\n    detaljer?: string;\n    livslopsstatus: Livslopsstatus;\n}\n\nexport function isSamtaleOrMote(aktivitet: AlleAktiviteter): aktivitet is SamtalereferatAktivitet | MoteAktivitet {\n    return (\n        aktivitet.type === VeilarbAktivitetType.SAMTALEREFERAT_TYPE || aktivitet.type === VeilarbAktivitetType.MOTE_TYPE\n    );\n}\n\nexport const isEksternAktivitet = (aktivitet: AlleAktiviteter): aktivitet is EksternAktivitet => {\n    return aktivitet.type === VeilarbAktivitetType.EKSTERN_AKTIVITET_TYPE;\n};\n\nexport interface EksternAktivitet extends AktivitetBaseProps {\n    type: VeilarbAktivitetType.EKSTERN_AKTIVITET_TYPE;\n    eksternAktivitet: EksternAktivitetData;\n}\n\nexport interface EksternAktivitetData {\n    type: EksternAktivitetType;\n    oppgave?: OppgaveLenke;\n    handlinger?: LenkeMedType[];\n    detaljer?: Detalj[];\n    etiketter?: Etikett[];\n}\n\nexport enum EksternAktivitetType {\n    ARENA_TILTAK_TYPE = 'ARENA_TILTAK',\n    MIDL_LONNSTILSKUDD_TYPE = 'MIDLERTIDIG_LONNSTILSKUDD',\n    VARIG_LONNSTILSKUDD_TYPE = 'VARIG_LONNSTILSKUDD',\n    ARBEIDSTRENING = 'ARBEIDSTRENING',\n    VARIG_TILRETTELAGT_ARBEID_I_ORDINAER_VIRKSOMHET = 'VARIG_TILRETTELAGT_ARBEID_I_ORDINAER_VIRKSOMHET',\n    MENTOR = 'MENTOR',\n    INDOPPFAG = 'INDOPPFAG',\n    ARBFORB = 'ARBFORB',\n    AVKLARAG = 'AVKLARAG',\n    VASV = 'VASV',\n    ARBRRHDAG = 'ARBRRHDAG',\n    DIGIOPPARB = 'DIGIOPPARB',\n    JOBBK = 'JOBBK',\n    GRUPPEAMO = 'GRUPPEAMO',\n    GRUFAGYRKE = 'GRUFAGYRKE',\n    REKRUTTERINGSTREFF = 'REKRUTTERINGSTREFF',\n    ENKELAMO = 'ENKELAMO',\n    ENKFAGYRKE = 'ENKFAGYRKE',\n    HOYERE_UTDANNING = 'HOYERE_UTDANNING'\n}\n"],"names":["millisecondsInWeek","millisecondsInDay","millisecondsInMinute","millisecondsInHour","millisecondsInSecond","minutesInMonth","minutesInDay","minutesInHour","constructFromSymbol","constructFrom","date","value","toDate","argument","context","addDays","amount","options","_date","addMinutes","subDays","ArenaEtikett","ArenaAktivitetType","AktivitetStatus","StillingStatus","StillingFraNavSoknadsstatus","Livslopsstatus","Kanal","JobbStatusType","isArenaAktivitet","aktivitet","isVeilarbAktivitet","VeilarbAktivitetType","isSamtaleOrMote","isEksternAktivitet","EksternAktivitetType"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}